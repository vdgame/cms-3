---
import MainLayout from '../../layouts/MainLayout.astro';
import Sidebar from '../../components/Sidebar.astro';
import VotingControls from '../../components/VotingControls';
import CommentSection from '../../components/CommentSection';
import ReportDialog from '../../components/ReportDialog';
import {
  questions,
  tags,
  popularBlogs,
  popularQuestions,
  answers,
  generateMockAnswers,
  users,
  questionComments,
  answerComments
} from '../../data/mockData';
import { formatDate, timeAgo } from '../../utils/dateUtils';

// 获取URL参数中的slug
const { slug } = Astro.params;

// 查找对应的问题
const question = questions.find(q => q.slug === slug);

// 找不到问题时跳转到404或问答首页
if (!question) {
  return Astro.redirect('/questions');
}

// 获取问题的回答
let questionAnswers = answers.filter(a => a.questionId === question.id);

// 如果没有回答，生成一些
if (questionAnswers.length === 0) {
  questionAnswers = generateMockAnswers(question.id, 3);
}

// 排序：已接受的答案在前，其余按投票数排序
questionAnswers.sort((a, b) => {
  if (a.accepted && !b.accepted) return -1;
  if (!a.accepted && b.accepted) return 1;
  return b.voteCount - a.voteCount;
});

// 获取热门标签
const popularTags = tags.slice(0, 10);

// 页面标题
const title = `${question.title} - 问答`;
---

<MainLayout title={title}>
  <div class="container py-8">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-8">
      <!-- 左侧内容区 -->
      <div class="lg:col-span-9">
        <!-- 问题详情 -->
        <article class="card overflow-hidden mb-8">
          <div class="p-6">
            <!-- 问题头部 -->
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center">
                <img src={question.author.avatar} alt={question.author.name} class="w-10 h-10 rounded-full mr-3" />
                <div>
                  <div class="font-medium">{question.author.name}</div>
                  <div class="text-sm text-gray-500">
                    提问于 <time datetime={question.createdAt}>{timeAgo(question.createdAt)}</time>
                  </div>
                </div>
              </div>

              <div class="flex items-center space-x-3">
                <button class="text-gray-500 hover:text-gray-700" id="share-button">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                  </svg>
                </button>
                <button class="text-gray-500 hover:text-red-600" id="report-button">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                </button>
              </div>
            </div>

            <!-- 问题标题 -->
            <h1 class="text-2xl font-bold mb-4">{question.title}</h1>

            <!-- 问题标签 -->
            <div class="flex flex-wrap gap-2 mb-6">
              {question.tags.map(tag => (
                <a href={`/tag/${tag.slug}`} class="tag">{tag.name}</a>
              ))}
            </div>

            <!-- 问题投票和内容 -->
            <div class="flex">
              <!-- 左侧投票 -->
              <VotingControls
                contentId={question.id}
                contentType="question"
                initialVoteCount={question.voteCount}
                client:load
              />

              <!-- 右侧内容 -->
              <div class="flex-grow">
                <div class="prose prose-lg max-w-none">
                  <Fragment set:html={question.content} />
                </div>
              </div>
            </div>

            <!-- 问题底部元数据 -->
            <div class="flex justify-between items-center mt-8 pt-4 border-t border-gray-200 text-sm text-gray-600">
              <div class="flex space-x-4">
                <span class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  {question.viewCount} 查看
                </span>
              </div>

              <div class="flex space-x-3">
                <button class="text-blue-600 hover:text-blue-800">编辑</button>
              </div>
            </div>

            <!-- 评论区 -->
            <div class="mt-4 pt-4 border-t border-gray-200">
              <CommentSection
                contentId={question.id}
                contentType="question"
                client:load
              />
            </div>
          </div>
        </article>

        <!-- 回答数量标头 -->
        <div class="mb-6">
          <h2 class="text-xl font-bold">{questionAnswers.length} 个回答</h2>
        </div>

        <!-- 排序选项 -->
        <div class="flex justify-end mb-8">
          <div class="relative inline-block text-left">
            <select class="border border-gray-300 rounded px-3 py-1 bg-white" id="answer-sort">
              <option value="votes">按票数排序</option>
              <option value="oldest">最早</option>
              <option value="newest">最新</option>
            </select>
          </div>
        </div>

        <!-- 回答列表 -->
        <div class="space-y-8">
          {questionAnswers.map((answer, index) => (
            <article class={`card overflow-hidden ${answer.accepted ? 'border-green-500 border-2' : ''}`} id={`answer-${answer.id}`}>
              <div class="p-6">
                {answer.accepted && (
                  <div class="flex items-center mb-4 bg-green-50 text-green-700 p-2 rounded">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <span class="font-medium">已采纳的回答</span>
                  </div>
                )}

                <!-- 回答头部 -->
                <div class="flex items-center justify-between mb-4">
                  <div class="flex items-center">
                    <img src={answer.author.avatar} alt={answer.author.name} class="w-10 h-10 rounded-full mr-3" />
                    <div>
                      <div class="font-medium">{answer.author.name}</div>
                      <div class="text-sm text-gray-500">
                        回答于 <time datetime={answer.createdAt}>{timeAgo(answer.createdAt)}</time>
                      </div>
                    </div>
                  </div>

                  <button class="report-answer-button text-gray-500 hover:text-red-600" data-answer-id={answer.id}>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </button>
                </div>

                <!-- 回答投票和内容 -->
                <div class="flex">
                  <!-- 左侧投票 -->
                  <VotingControls
                    contentId={answer.id}
                    contentType="answer"
                    initialVoteCount={answer.voteCount}
                    canAccept={question.author.id === 1} <!-- 假设当前用户是问题作者 -->
                    questionId={question.id}
                    initialAccepted={answer.accepted}
                    client:load
                  />

                  <!-- 右侧内容 -->
                  <div class="flex-grow">
                    <div class="prose prose-lg max-w-none">
                      <Fragment set:html={answer.content} />
                    </div>
                  </div>
                </div>

                <!-- 回答底部元数据 -->
                <div class="flex justify-end items-center mt-8 pt-4 border-t border-gray-200 text-sm text-gray-600">
                  <div class="flex space-x-3">
                    <button class="text-blue-600 hover:text-blue-800">编辑</button>
                  </div>
                </div>

                <!-- 评论区 -->
                <div class="mt-4 pt-4 border-t border-gray-200">
                  <CommentSection
                    contentId={answer.id}
                    contentType="answer"
                    client:load
                  />
                </div>
              </div>
            </article>
          ))}
        </div>

        <!-- 发表回答区域 -->
        <div class="mt-10">
          <h3 class="text-xl font-bold mb-4">你的回答</h3>

          <div class="card p-6">
            <textarea
              id="new-answer"
              class="w-full p-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows="6"
              placeholder="请输入你的回答..."
            ></textarea>

            <div class="mt-4 flex justify-between items-center">
              <div class="text-sm text-gray-500">
                支持 Markdown 格式
              </div>

              <button class="btn btn-primary" id="submit-answer">
                提交回答
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- 右侧侧边栏 -->
      <div class="lg:col-span-3">
        <div class="sticky top-24">
          <Sidebar
            showCreateButton={true}
            createButtonLink="/questions/ask"
            createButtonText="提问"
            popularTags={popularTags}
            popularQuestions={popularQuestions.slice(0, 5)}
            popularPosts={popularBlogs.slice(0, 5)}
          />

          <!-- 相关问题 -->
          <div class="card p-4 mt-6">
            <h3 class="text-lg font-bold mb-3">相关问题</h3>
            <ul class="space-y-3">
              {questions
                .filter(q => q.id !== question.id && q.tags.some(t => question.tags.some(qt => qt.id === t.id)))
                .slice(0, 5)
                .map(q => (
                  <li class="border-b border-gray-100 pb-2 last:border-0 last:pb-0">
                    <a href={`/questions/${q.slug}`} class="text-blue-700 hover:text-blue-500 font-medium line-clamp-2">
                      {q.title}
                    </a>
                    <div class="flex justify-between mt-1 text-xs text-gray-500">
                      <span>{q.answerCount} 回答</span>
                      <span>{q.voteCount} 票</span>
                    </div>
                  </li>
                ))
              }
            </ul>
          </div>

          <!-- 二维码 -->
          <div class="card p-4 mt-6 text-center">
            <h3 class="text-lg font-bold mb-3">分享到微信</h3>
            <div class="bg-gray-100 p-4 rounded-lg">
              <svg viewBox="0 0 100 100" class="w-32 h-32 mx-auto">
                <path fill="#000" d="M0,0 L100,0 L100,100 L0,100 Z M10,10 L10,90 L90,90 L90,10 Z" />
                <text x="50" y="50" font-family="sans-serif" font-size="10" text-anchor="middle" dominant-baseline="middle">
                  扫码分享
                </text>
              </svg>
            </div>
            <p class="text-sm text-gray-600 mt-2">扫描二维码分享到微信</p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 举报对话框容器 -->
  <div id="report-dialog-container"></div>

  <!-- 右下角快捷导航 -->
  <div class="fixed right-8 bottom-8 flex flex-col space-y-4">
    <button
      id="back-to-top"
      class="bg-blue-500 text-white rounded-full p-3 shadow-lg hover:bg-blue-600 transition-colors"
      aria-label="返回顶部"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
      </svg>
    </button>

    <button
      id="show-qrcode"
      class="bg-blue-500 text-white rounded-full p-3 shadow-lg hover:bg-blue-600 transition-colors"
      aria-label="显示二维码"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" />
      </svg>
    </button>
  </div>
</MainLayout>

<style>
  .prose {
    @apply text-gray-800;
  }

  .prose h2 {
    @apply text-2xl font-bold mt-8 mb-4;
  }

  .prose h3 {
    @apply text-xl font-bold mt-6 mb-3;
  }

  .prose p {
    @apply mb-4 leading-relaxed;
  }

  .prose ul, .prose ol {
    @apply mb-4 pl-6;
  }

  .prose li {
    @apply mb-2;
  }

  .prose ul li {
    @apply list-disc;
  }

  .prose ol li {
    @apply list-decimal;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  import { addComment, reportContent } from '../../utils/interactionUtils';

  document.addEventListener('DOMContentLoaded', () => {
    // 返回顶部按钮功能
    const backToTopButton = document.getElementById('back-to-top');

    if (backToTopButton) {
      // 默认隐藏
      backToTopButton.classList.add('hidden');

      // 滚动时显示/隐藏
      window.addEventListener('scroll', () => {
        if (window.scrollY > 300) {
          backToTopButton.classList.remove('hidden');
        } else {
          backToTopButton.classList.add('hidden');
        }
      });

      // 点击返回顶部
      backToTopButton.addEventListener('click', () => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      });
    }

    // 提交回答功能
    const submitAnswerButton = document.getElementById('submit-answer');
    const newAnswerTextarea = document.getElementById('new-answer');

    if (submitAnswerButton && newAnswerTextarea) {
      submitAnswerButton.addEventListener('click', () => {
        const answerContent = (newAnswerTextarea as HTMLTextAreaElement).value.trim();
        if (answerContent) {
          // 在实际应用中，这里会是API调用
          alert('回答已提交！在真实应用中，这会保存到服务器。');
          (newAnswerTextarea as HTMLTextAreaElement).value = '';
        } else {
          alert('请输入回答内容');
        }
      });
    }

    // 回答排序功能
    const answerSortSelect = document.getElementById('answer-sort');

    if (answerSortSelect) {
      answerSortSelect.addEventListener('change', (e) => {
        const sortValue = (e.target as HTMLSelectElement).value;
        // 在实际应用中，这里会重新请求或排序回答
        alert(`已按${sortValue === 'votes' ? '票数' : sortValue === 'oldest' ? '时间从早到晚' : '时间从晚到早'}排序！`);
      });
    }

    // 举报问题功能
    const reportButton = document.getElementById('report-button');
    const reportDialogContainer = document.getElementById('report-dialog-container');

    if (reportButton && reportDialogContainer) {
      reportButton.addEventListener('click', (e) => {
        const button = e.currentTarget as HTMLElement;
        const rect = button.getBoundingClientRect();

        // 动态引入 ReportDialog 组件并渲染
        import('../../components/ReportDialog').then(({ default: ReportDialog }) => {
          // 获取当前页面URL中的问题ID
          const questionId = parseInt(window.location.pathname.split('/').pop() || '0');

          // 创建一个容器来渲染组件
          const dialogContainer = document.createElement('div');
          reportDialogContainer.appendChild(dialogContainer);

          // 渲染组件
          new ReportDialog({
            target: dialogContainer,
            props: {
              contentId: questionId,
              contentType: 'question',
              onClose: () => {
                reportDialogContainer.innerHTML = '';
              },
              position: {
                top: rect.bottom + window.scrollY,
                left: rect.left + window.scrollX - 250 // Adjust for dialog width
              }
            }
          });
        });
      });
    }

    // 举报回答功能
    const reportAnswerButtons = document.querySelectorAll('.report-answer-button');

    if (reportAnswerButtons.length > 0 && reportDialogContainer) {
      reportAnswerButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const button = e.currentTarget as HTMLElement;
          const answerId = parseInt(button.getAttribute('data-answer-id') || '0');
          const rect = button.getBoundingClientRect();

          // 动态引入 ReportDialog 组件并渲染
          import('../../components/ReportDialog').then(({ default: ReportDialog }) => {
            // 创建一个容器来渲染组件
            const dialogContainer = document.createElement('div');
            reportDialogContainer.appendChild(dialogContainer);

            // 渲染组件
            new ReportDialog({
              target: dialogContainer,
              props: {
                contentId: answerId,
                contentType: 'answer',
                onClose: () => {
                  reportDialogContainer.innerHTML = '';
                },
                position: {
                  top: rect.bottom + window.scrollY,
                  left: rect.left + window.scrollX - 250 // Adjust for dialog width
                }
              }
            });
          });
        });
      });
    }

    // 分享功能
    const shareButton = document.getElementById('share-button');

    if (shareButton) {
      shareButton.addEventListener('click', () => {
        if (navigator.share) {
          navigator.share({
            title: document.title,
            url: window.location.href
          })
          .catch(error => console.log('分享失败:', error));
        } else {
          // 如果浏览器不支持分享API，则复制链接到剪贴板
          navigator.clipboard.writeText(window.location.href)
            .then(() => alert('链接已复制到剪贴板'))
            .catch(error => console.error('无法复制链接:', error));
        }
      });
    }

    // 显示二维码功能
    const showQrcodeButton = document.getElementById('show-qrcode');

    if (showQrcodeButton) {
      showQrcodeButton.addEventListener('click', () => {
        const qrcodeContainer = document.querySelector('.card:has(svg[viewBox="0 0 100 100"])');
        if (qrcodeContainer) {
          qrcodeContainer.scrollIntoView({ behavior: 'smooth' });
        }
      });
    }
  });
</script>
